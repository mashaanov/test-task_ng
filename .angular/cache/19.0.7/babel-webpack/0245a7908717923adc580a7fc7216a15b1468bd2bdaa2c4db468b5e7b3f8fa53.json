{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport booksData from \"../assets/books.json\";\nimport * as i0 from \"@angular/core\";\nexport let BookService = /*#__PURE__*/(() => {\n  class BookService {\n    originalBooks = booksData.books.map(book => ({\n      ...book,\n      quantity: 1\n    }));\n    filteredBooks = structuredClone(this.originalBooks);\n    booksSubject = new BehaviorSubject({\n      error: \"\",\n      total: this.filteredBooks.length.toString(),\n      books: this.filteredBooks\n    });\n    params = {\n      sort: \"default\",\n      query: \"\"\n    };\n    saveBooksState() {\n      localStorage.setItem(\"booksState\", JSON.stringify({\n        books: this.filteredBooks,\n        total: this.filteredBooks.length,\n        params: this.params\n      }));\n    }\n    get getBooks$() {\n      return this.booksSubject.asObservable();\n    }\n    getTotal() {\n      return this.booksSubject.getValue().total;\n    }\n    updateBooks() {\n      this.booksSubject.next({\n        error: \"\",\n        total: this.filteredBooks.length.toString(),\n        books: this.filteredBooks\n      });\n      this.saveBooksState();\n    }\n    searchBooks(query) {\n      const lowerQuery = query.toLowerCase();\n      this.filteredBooks = this.originalBooks.filter(book => {\n        return book.title.toLowerCase().includes(lowerQuery) || book.subtitle.toLowerCase().includes(lowerQuery);\n      });\n      this.updateBooks();\n    }\n    onSort(field, order) {\n      this.filteredBooks.sort((a, b) => {\n        const valueA = field === \"price\" ? parseFloat(a[field].replace(/[^0-9.]/g, \"\")) : a[field].toLocaleLowerCase();\n        const valueB = field === \"price\" ? parseFloat(b[field].replace(/[^0-9.]/g, \"\")) : b[field].toLocaleLowerCase();\n        if (valueA > valueB) {\n          return order === \"asc\" ? 1 : -1;\n        } else if (valueA < valueB) {\n          return order === \"asc\" ? -1 : 1;\n        } else {\n          return 0;\n        }\n      });\n    }\n    getBookByIsbn(isbn13) {\n      const found = this.filteredBooks.find(book => book.isbn13 === isbn13);\n      return found;\n    }\n    static ɵfac = function BookService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BookService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BookService,\n      factory: BookService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return BookService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}