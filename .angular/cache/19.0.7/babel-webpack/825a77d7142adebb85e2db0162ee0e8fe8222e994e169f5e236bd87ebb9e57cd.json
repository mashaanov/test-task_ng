{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nexport let BasketService = /*#__PURE__*/(() => {\n  class BasketService {\n    cartItemsSubject = new BehaviorSubject([]);\n    cartItems$ = this.cartItemsSubject.asObservable();\n    totalItems$ = this.cartItems$.pipe(map(items => items.length));\n    totalCost$ = this.cartItems$.pipe(map(items => {\n      return items.reduce((acc, item) => acc + Number(item.price.replace(/[^\\d.]/g, \"\")), 0);\n    }));\n    constructor() {\n      const savedItems = localStorage.getItem(\"basketItems\");\n      if (savedItems) {\n        this.cartItemsSubject.next(JSON.parse(savedItems));\n      }\n    }\n    saveItems(items) {\n      localStorage.setItem(\"basketItems\", JSON.stringify(items));\n    }\n    get getCartItems$() {\n      return this.cartItems$;\n    }\n    addItem(book) {\n      const currentItems = [...this.cartItemsSubject.value];\n      const index = currentItems.findIndex(item => {\n        item.book.isbn13 === book.isbn13;\n      });\n      if (index > -1) {\n        currentItems[index].book += 1;\n      } else {\n        currentItems.push({\n          book,\n          quantity: 1\n        });\n      }\n      this.cartItemsSubject.next(currentItems);\n      this.saveItems(currentItems);\n    }\n    removeItem(bookId) {\n      const currentItems = [...this.cartItemsSubject.value];\n      const index = currentItems.f;\n    }\n    static ɵfac = function BasketService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BasketService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BasketService,\n      factory: BasketService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return BasketService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}