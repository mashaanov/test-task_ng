{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport ModalLayout from \"../modal-layout/modal-layout\";\nimport { ItemListComponent } from \"../list/list\";\nimport BookItem from \"../book-item/book-item\";\nlet BasketTool = class BasketTool {\n  basketService;\n  modalService;\n  totalItems$;\n  cartItems$;\n  totalCost$;\n  isModalVisible = false;\n  constructor(basketService, modalService) {\n    this.basketService = basketService;\n    this.modalService = modalService;\n  }\n  ngOnInit() {\n    this.totalItems$ = this.basketService.totalItems$;\n    this.cartItems$ = this.basketService.getCartItems$;\n    this.totalCost$ = this.basketService.totalCost$;\n  }\n  openModalCart() {\n    this.isModalVisible = true;\n    this.modalService.open();\n  }\n  closeModal() {\n    this.isModalVisible = false;\n    this.modalService.close();\n  }\n  handleRemove(item) {\n    this.basketService.removeItem(item.book.isbn13);\n  }\n  handleIncrease(bookId) {\n    this.basketService.increaseQuantity(bookId);\n  }\n  handleDecrease(bookId) {\n    this.basketService.decreaseQuantity(bookId);\n  }\n};\nBasketTool = __decorate([Component({\n  selector: \"app-basket-tool\",\n  templateUrl: \"./basket-tool.html\",\n  styleUrls: [\"./styles.css\"],\n  standalone: true,\n  imports: [CommonModule, ModalLayout, NgTemplateOutlet, NgIf, NgFor, ItemListComponent, BookItem]\n})], BasketTool);\nexport default BasketTool;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}